// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package main is a generated GoMock package.
package main

import (
	bufio "bufio"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// Subscribe mocks base method.
func (m *MockServiceInterface) Subscribe(playerSubscribe *PlayerSubscribe) (func(*bufio.Writer), error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", playerSubscribe)
	ret0, _ := ret[0].(func(*bufio.Writer))
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockServiceInterfaceMockRecorder) Subscribe(playerSubscribe interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockServiceInterface)(nil).Subscribe), playerSubscribe)
}

// UpsertPlayer mocks base method.
func (m *MockServiceInterface) UpsertPlayer(playerRequest *PlayerRequest) (*PlayerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPlayer", playerRequest)
	ret0, _ := ret[0].(*PlayerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPlayer indicates an expected call of UpsertPlayer.
func (mr *MockServiceInterfaceMockRecorder) UpsertPlayer(playerRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPlayer", reflect.TypeOf((*MockServiceInterface)(nil).UpsertPlayer), playerRequest)
}
