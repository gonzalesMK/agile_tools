// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreatePlayer mocks base method.
func (m *MockServiceInterface) CreatePlayer(name string, status int8, roomId uint) (*Players, *chan []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlayer", name, status, roomId)
	ret0, _ := ret[0].(*Players)
	ret1, _ := ret[1].(*chan []byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePlayer indicates an expected call of CreatePlayer.
func (mr *MockServiceInterfaceMockRecorder) CreatePlayer(name, status, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlayer", reflect.TypeOf((*MockServiceInterface)(nil).CreatePlayer), name, status, roomId)
}

// DeletePlayer mocks base method.
func (m *MockServiceInterface) DeletePlayer(player *Players, room uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlayer", player, room)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlayer indicates an expected call of DeletePlayer.
func (mr *MockServiceInterfaceMockRecorder) DeletePlayer(player, room interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlayer", reflect.TypeOf((*MockServiceInterface)(nil).DeletePlayer), player, room)
}
